name: Autoversion and Changelog

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  autoversion:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'release:') && !contains(github.event.head_commit.message, 'chore(release)') }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Debug Environment Variables
        run: |
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "GITHUB_SHA: $GITHUB_SHA"
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_ACTOR: $GITHUB_ACTOR"
          echo "GITHUB_TOKEN permissions:"
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/$GITHUB_REPOSITORY | jq '.permissions'

      - name: Debug Workflow Start
        run: |
          echo "Starting autoversion workflow"
          echo "Commit message: $(git log -1 --pretty=%B)"
          echo "Current branch: $(git branch --show-current)"
          echo "Remote info: $(git remote -v)"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"
          scope: "@giof"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Set PNPM Store Path
        shell: bash
        run: |
          echo "STORE_PATH=$HOME/.pnpm-store" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: pnpm install --store-dir=${{ env.STORE_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git User
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          echo "Git user configuration:"
          git config --global --list

      - name: Run Validation
        run: pnpm validate

      - name: Determine New Version
        id: new_version
        run: |
          # Get the current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Determine bump type based on commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $COMMIT_MSG == *"BREAKING CHANGE"* || $COMMIT_MSG == *"major"* ]]; then
            BUMP_TYPE="major"
          elif [[ $COMMIT_MSG == *"feat"* || $COMMIT_MSG == *"feature"* || $COMMIT_MSG == *"minor"* ]]; then
            BUMP_TYPE="minor"
          else
            BUMP_TYPE="patch"
          fi
          
          echo "Determined bump type: $BUMP_TYPE"
          
          # Use npm version to bump (simpler and more reliable)
          npm version $BUMP_TYPE --no-git-tag-version
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"
          
          # Validate version was actually bumped
          if [ "$CURRENT_VERSION" == "$NEW_VERSION" ]; then
            echo "::error::Version was not bumped. Current and new versions are the same: $CURRENT_VERSION"
            exit 1
          fi

      - name: Generate Changelog
        run: |
          # Generate the changelog AFTER version bump so it knows the correct version
          pnpm changelogen --output CHANGELOG.md
          
          # Display the changelog content for debugging
          echo "--- CHANGELOG.md Content ---"
          cat CHANGELOG.md
          echo "----------------------------"

      - name: Update package.json and CHANGELOG
        run: |
          git add package.json CHANGELOG.md
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git commit -m "release: v${{ steps.new_version.outputs.NEW_VERSION }}"

      - name: Push Changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main

      - name: Create Tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = "${{ steps.new_version.outputs.NEW_VERSION }}";
            const tagName = `v${version}`;
            
            try {
              console.log(`Creating tag ${tagName}...`);
              
              // Get the current commit SHA
              const { data: refData } = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'heads/main',
              });
              const sha = refData.object.sha;
              
              console.log(`Current commit SHA: ${sha}`);
              
              // Create tag object
              const { data: tagData } = await github.rest.git.createTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tagName,
                message: `Release ${tagName}`,
                object: sha,
                type: 'commit',
                tagger: {
                  name: 'GitHub Actions',
                  email: 'actions@github.com',
                  date: new Date().toISOString(),
                },
              });
              
              console.log(`Tag object created: ${JSON.stringify(tagData)}`);
              
              // Create tag reference
              const { data: refTagData } = await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`,
                sha: tagData.sha,
              });
              
              console.log(`Tag reference created: ${JSON.stringify(refTagData)}`);
              
              console.log(`âœ… Successfully created tag ${tagName}`);
            } catch (error) {
              console.error(`Error creating tag: ${error.message}`);
              console.error(JSON.stringify(error));
              throw error;
            } 